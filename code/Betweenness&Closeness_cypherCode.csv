name,description,query,id,parentId,isFolder
Main code,,":param {
  // Define the file path root and the individual file names required for loading.
  // https://neo4j.com/docs/operations-manual/current/configuration/file-locations/
  file_path_root: 'file:///', // Change this to the folder your script can access the files at.
  file_0: 'olympics_dataset.csv'
};

// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 2025.6.0.
CREATE CONSTRAINT `Name_ATHLETES_uniq` IF NOT EXISTS
FOR (n: `ATHLETES`)
REQUIRE (n.`Name`) IS UNIQUE;
CREATE CONSTRAINT `Year_YEAR_uniq` IF NOT EXISTS
FOR (n: `YEAR`)
REQUIRE (n.`Year`) IS UNIQUE;
CREATE CONSTRAINT `NOC_NOC_uniq` IF NOT EXISTS
FOR (n: `NOC`)
REQUIRE (n.`NOC`) IS UNIQUE;
CREATE CONSTRAINT `Sport_SPORT_uniq` IF NOT EXISTS
FOR (n: `SPORT`)
REQUIRE (n.`Sport`) IS UNIQUE;
CREATE CONSTRAINT `Medal_MEDAL_uniq` IF NOT EXISTS
FOR (n: `MEDAL`)
REQUIRE (n.`Medal`) IS UNIQUE;

:param {
  idsToSkip: []
};

// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`Name` IN $idsToSkip AND NOT row.`Name` IS NULL
CALL {
  WITH row
  MERGE (n: `ATHLETES` { `Name`: row.`Name` })
  SET n.`Name` = row.`Name`
  SET n.`player_id` = row.`player_id`
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`Year` IN $idsToSkip AND NOT toInteger(trim(row.`Year`)) IS NULL
CALL {
  WITH row
  MERGE (n: `YEAR` { `Year`: toInteger(trim(row.`Year`)) })
  SET n.`Year` = toInteger(trim(row.`Year`))
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`NOC` IN $idsToSkip AND NOT row.`NOC` IS NULL
CALL {
  WITH row
  MERGE (n: `NOC` { `NOC`: row.`NOC` })
  SET n.`NOC` = row.`NOC`
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`Sport` IN $idsToSkip AND NOT row.`Sport` IS NULL
CALL {
  WITH row
  MERGE (n: `SPORT` { `Sport`: row.`Sport` })
  SET n.`Sport` = row.`Sport`
  SET n.`Event` = row.`Event`
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`Medal` IN $idsToSkip AND NOT row.`Medal` IS NULL
CALL {
  WITH row
  MERGE (n: `MEDAL` { `Medal`: row.`Medal` })
  SET n.`Medal` = row.`Medal`
} IN TRANSACTIONS OF 10000 ROWS;


// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `ATHLETES` { `Name`: row.`Name` })
  MATCH (target: `NOC` { `NOC`: row.`NOC` })
  MERGE (source)-[r: `IN_COUNTRY`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `ATHLETES` { `Name`: row.`Name` })
  MATCH (target: `SPORT` { `Sport`: row.`Sport` })
  MERGE (source)-[r: `ATTEND_SPORT`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `ATHLETES` { `Name`: row.`Name` })
  MATCH (target: `YEAR` { `Year`: toInteger(trim(row.`Year`)) })
  MERGE (source)-[r: `ATTEND_YEAR`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `ATHLETES` { `Name`: row.`Name` })
  MATCH (target: `MEDAL` { `Medal`: row.`Medal` })
  MERGE (source)-[r: `ATHLETE_MEDAL`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `NOC` { `NOC`: row.`NOC` })
  MATCH (target: `MEDAL` { `Medal`: row.`Medal` })
  MERGE (source)-[r: `COUNTRY_MEDAL`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `NOC` { `NOC`: row.`NOC` })
  MATCH (target: `SPORT` { `Sport`: row.`Sport` })
  MERGE (source)-[r: `COUNTRY_ATTEND_SPORT`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `NOC` { `NOC`: row.`NOC` })
  MATCH (target: `YEAR` { `Year`: toInteger(trim(row.`Year`)) })
  MERGE (source)-[r: `COUNTRY_ATTEND_YEAR`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;
",0,,false
closeness NOC1,,"// STEP 1: สร้างความสัมพันธ์ COUNTRY_PARTICIPATED ใน SPORT + YEAR
MATCH (a:ATHLETES)-[:IN_COUNTRY]->(n:NOC)
MATCH (a)-[:ATTEND_SPORT]->(s:SPORT)
MATCH (a)-[:ATTEND_YEAR]->(y:YEAR)
MERGE (n)-[:COUNTRY_PARTICIPATED_IN]->(sy:SPORT_YEAR {sport: s.Sport, year: y.Year})
",1,,false
Bwteenness THA athlete,,"
CALL gds.graph.project.cypher(
  'thaiAthleteBridgeGraph',
  'MATCH (a:ATHLETES)-[:IN_COUNTRY]->(:NOC {NOC: ""THA""}) RETURN id(a) AS id',
  '
  MATCH (a1:ATHLETES)-[:IN_COUNTRY]->(:NOC {NOC: ""THA""}),
        (a2:ATHLETES)-[:IN_COUNTRY]->(:NOC {NOC: ""THA""}),
        (a1)-[:ATTEND_SPORT]->(s:SPORT)<-[:ATTEND_SPORT]-(a2),
        (a1)-[:ATTEND_YEAR]->(y:YEAR)<-[:ATTEND_YEAR]-(a2)
  WHERE id(a1) < id(a2)
  RETURN id(a1) AS source, id(a2) AS target
  '
);


CALL gds.betweenness.write('thaiAthleteBridgeGraph', {
  writeProperty: 'betweennessScore'
});

MATCH (a:ATHLETES)
WHERE a.betweennessScore IS NOT NULL
RETURN a.Name AS athlete, a.betweennessScore AS score
ORDER BY score DESC
LIMIT 5;",2,,false
Closeness1-4,,"// สร้าง SPORT_YEAR node และความสัมพันธ์ COUNTRY_PARTICIPATED_IN
MATCH (a:ATHLETES)-[:IN_COUNTRY]->(n:NOC)
MATCH (a)-[:ATTEND_SPORT]->(s:SPORT)
MATCH (a)-[:ATTEND_YEAR]->(y:YEAR)
MERGE (sy:SPORT_YEAR {sport: s.Sport, year: y.Year})
MERGE (n)-[:COUNTRY_PARTICIPATED_IN]->(sy)
",3,,false
Cloesness2-4,,"MATCH (n1:NOC)-[:COUNTRY_PARTICIPATED_IN]->(sy:SPORT_YEAR)<-[:COUNTRY_PARTICIPATED_IN]-(n2:NOC)
WHERE id(n1) < id(n2)
MERGE (n1)-[r:CONNECTED_TO_NOC]->(n2)
ON CREATE SET r.weight = 1
ON MATCH SET r.weight = coalesce(r.weight, 0) + 1
",4,,false
Closeness3-4,,"CALL gds.graph.project(
  'countrySportGraphWeighted',
  'NOC',
  {
    CONNECTED_TO_NOC: {
      properties: {
        weight: {
          property: 'weight',
          defaultValue: 1.0
        }
      }
    }
  }
);
",5,,false
Closeness4-3,,"MATCH (source:NOC)
WITH collect(source) AS sources
UNWIND sources AS a
UNWIND sources AS b
WITH a, b WHERE id(a) <> id(b)

CALL gds.shortestPath.dijkstra.stream('countrySportGraphWeighted', {
  sourceNode: id(a),
  targetNodes: [id(b)],
  relationshipWeightProperty: 'weight'
})
YIELD totalCost

WITH a, collect(totalCost) AS costs
WITH a,
     [c IN costs WHERE c IS NOT NULL AND c > 0] AS validCosts
WITH a.NOC AS country,
     CASE WHEN size(validCosts) = 0 THEN 0.0
          ELSE 1.0 / reduce(s = 0.0, c IN validCosts | s + c) END AS closeness
RETURN country, closeness
ORDER BY closeness DESC
LIMIT 20;
",6,,false